#!/usr/bin/perl
#
use strict;
select(STDERR); $| = 1;
select(STDOUT); $| = 1;

#
#  Program:	F2C-ACC
#  Written by:	Mark Govett	NOAA/ESRL
#  Last Update:	April 2009
#
#  Description:  This perl program converts Fortran code into CUDA-C or C code.
#	
use Getopt::Long;
my($comment,$Real8,$Integer8,$FileType,$FixedFormat,$FreeFormat,$Generate,$Kernel,$Module,$Header,$OutputFile,$help);
my $debug;
my $V;
GetOptions("comment!" => \$comment,
	   "debug!" => \$debug,
           "FileType=s" => \$FileType,
	   "FixedFormat" => \$FixedFormat,
	   "FreeFormat" => \$FreeFormat,
	   "Generate=s" => \$Generate,
	   "Kernel" => \$Kernel,
	   "Help" => \$help,
	   "Header" => \$Header,
	   "Module" => \$Module,
	   "OutputFile=s" => \$OutputFile,
       "verbose!"=>\$V);

# not supported yet
#	   "i8" => \$Integer8,
#	   "r8" => \$Real8,

sub help_sub{
    print "Usage $0 [options] files\n";
    print "   --comment                     Retain original array statements as comments\n";
    print "   --FileType=[MODULE][INCLUDE]  File is either a module or include file\n";
    print "   --Fixed                       Input files are f77 or f90 fixed format\n";
    print "   --Free                        Input files are fortran 90 free format\n";
    print "   --Generate=[C][CUDA]          Language Options:  CUDA and C, default is CUDA\n";
    print "   --Kernel                      File contains GPU kernel routines only\n";
    print "   --OutputFile=[filename]       Option to specify the generated output file\n";
    print "   --verbose                     Verbose output\n";
    print "\n\n";

# not supported yet
#    print "      --i8        	Promotes integer declarations to 8 bytes\n";
#    print "      --r8        	Promotes real declarations to real*8\n";
};

if ($help) {
  &help_sub;
  exit;
}

if ($FileType) {
if (($FileType ne "MODULE") && ($FileType ne "INCLUDE")) {
  help_sub;
  print "F2C-ACC ERROR: Invalid --FileType option\n  Exiting ...\n";
  exit 1;
} else {  
  if ($FileType eq "MODULE") {
    $Module = 1;
  } else {
    $Header = 1;
  }
}
}
  
if ($Generate eq "") { $Generate = "CUDA"; }
if (($Generate ne "C") && ($Generate ne "CUDA")){
  print "\nF2C-ACC ERROR: \"$Generate\" not supported\n\n";
  help_sub;
  exit;
}

my $HOME;
if(defined($ENV{HOME})){
    $HOME = $ENV{HOME};
}else{
    $HOME = "~";
}

my $GPU_ROOT;
if(defined($ENV{GPU_ROOT})){
    $GPU_ROOT = $ENV{GPU_ROOT};
    print "Using $GPU_ROOT/F2C-ACC.exe\n" if $V;
}else{
    $GPU_ROOT = "$HOME/F2C-ACC/bin";
}
my @GPU_EXECS = ("$GPU_ROOT/F2C-ACC.exe");
#

my $patherror=0;
foreach((@GPU_EXECS)){
    unless(-x $_){
	$patherror=1;
	print "ERROR: $_ Not found or not executable\n";
    }
}
exit if($patherror>0);
#
#	get the command line arguments
#
my @files = @ARGV;
if(!@files) {
&help_sub;
"F2C-ACC ERROR: no file specified\n";
exit;
}
#
my($file,$fpath,$fbase);

foreach $file (@files){
    print "\n" if $V;
    if (! -e $file) {
      print "F2C-ACC ERROR: file: $file does not exist.\n  Exiting ...\n";
      exit 1;
    }

    my $suffix;
    if($file =~ /^(.*\/)([^\/\.]+)\.?(.*)$/){
	$fpath = $1;
	$fbase = $2;
	$file = $2.".".$3;
	$suffix = $3;
    }else{
	$file =~ /([^\/\.]+)\.?(.*)$/;
        $fpath = './';
        $fbase = $1;
	$suffix = $2;
    }
#
# establish default rules for fixed or free format files
    if ((!$FreeFormat) && (!$FixedFormat)) {
      if (($suffix eq "f90") or ($suffix eq "F90")) {
	$FreeFormat = 1;
      }
      if (($suffix eq "f") or ($suffix eq "F")) {
	$FixedFormat = 1;
      }
    }	
#
#	the file names...
#
    my($username) = getpwuid($<);
    my ($INFILE)  = "$fpath$file";

#
# Find a unique file name for the intermediate files
#
    system("mkdir /tmp/$username") unless(-e "/tmp/$username");
    my ($OUTFILE) = "$fpath$fbase".".m4";
    if ($Header) {
      $OUTFILE = "$fpath$fbase".".$suffix".".h";
    }

    if ($OutputFile) {
      if (-e $OutputFile) {
	print "F2C-ACC ERROR: output file: $OutputFile  already exists.\n  Exiting ...\n\n";
	exit 1;
      } else {
	$OUTFILE = $OutputFile;
      }
    } else {
      if(-e "$fpath/$OUTFILE"){
	system("mv $OUTFILE $OUTFILE~");
      }
    }

    if ($Header) {
      print "processing include file: $INFILE\n" if $V;
      system("mv $INFILE $INFILE.ACC");
      system("cp $INFILE.ACC $INFILE");
      open(IN,">>$INFILE") || die "cannot create $INFILE";

      if (!$FreeFormat) {
        print IN "      end\n";	
      } else {
        print IN "end\n";	
      }
      close(IN);
    }

    print "F2C-ACC translation of $INFILE into $OUTFILE\n" if $V;
#
# Run ppp and collect the output (name and line to add the include file)
#
    print "\nGenerating $Generate code ...\n" if $V;
    my @smsout = &run_translator(\@GPU_EXECS,$INFILE,$username,$debug);
    if ($Header) {
      system("mv $INFILE.ACC $INFILE");
    }
#
# Merge ppp output into original file
#
    print " Merging output\n" if($debug);
    &merge_files($INFILE,"$fpath$OUTFILE",\@smsout);

}

exit;
sub numerically { $a <=> $b; }
# ***************************************************************************
sub merge_files {
#
#  Parse the GPU output into replace and append actions then merged into
#  the original file.  Comment out Fortran comments as necessary, and
#  insert ERROR messages for Fortran statements that are not translated.
#
    my($MERGE_IN,$MERGE_OUT,$smsout_ptr) = @_;
    my(%append);
    my(%replace);
    my(%remove);
    my(@smsout) = @$smsout_ptr;
    my($action,$line_num,$newstuff);
    my $prev_linenum;
    my $linenum;my $message;my $stuff;my $coords;my $junk;
    my(%codelines);

# 	embed GPU executable language warning messages in the output 
    my $cnt = $#smsout+1;
    my $lines=0;
    foreach(@smsout){
        chomp;
	if ((/^"/) && (/WARNING/)) {	
	  ($stuff,$message) = split(/ WARNING: /, $_);
	  $stuff =~ s/\"//g;
	  ($junk,$line_num) = split(/ line /, $stuff);
	  $line_num =~ s/:\d*//;

	  $smsout[$cnt] = "begin_append $line_num\n";
	  $smsout[$cnt+1] = "// F2C-ACC WARNING:\"$stuff\" $message\n";
	  $smsout[$cnt+2] = "end_append\n";
	  $cnt += 3;
	}
    }

#	fill the arrays with all the action values 
    while(@smsout){   
	($action,$line_num,$newstuff) = 
		&next_action(\@smsout);
	if($action eq "append"){
          my $numlines = scalar(split("\n",$codelines{$linenum}));
	  if ($numlines > 0) {
	    $append{$line_num}.= "$newstuff\n";
	  } else {
	    $append{$line_num}.= $newstuff;
	  }
	}
	elsif($action eq "replace"){
	    $newstuff =~ s/^ //;
	    $replace{$line_num}= $newstuff;
	}
	elsif($action eq "remove"){
	    $remove{$line_num}= $newstuff;
	}
    }
#
    open(INFILE,"$MERGE_IN");
    my @infile = <INFILE>;
    close(INFILE);
#
#
    my($whitespace) = "      " ;
    my($i,$thisline);
    my(%codelines);
    $thisline=0;	# current line being processed
    my $prevcomment=-1;
    my $prevcode=0;
    my($contlines);
    my $f90_continue=0;
#
#	loop through the input file - incrementing as needed to handle
#	continuation lines.
#		$thisline	- line number of line being processed
#		$prevline	- line number being stored in codelines
#
    foreach(@infile){
	chomp;
        s/\t/$whitespace/;             # replace tabs with space
	if (!$FreeFormat) {
	  if(/^\s{5,5}\S/) {        # a code continuation
	    $codelines{$prevcode}.="$_\n";              
	    $contlines++;
	    next;
	  }

          if ((/^\s*$/) && ($contlines > 0)) {
	    $codelines{$prevcode}.="$_ \n";              
	    $contlines++;
	    next;
	  }
	} else {	
	  if ($f90_continue == 1) { # code continuation
	    $codelines{$prevcode}.="$_\n";              
	    $contlines++;
	    if ((!/&\s*$/) && (!/&\s*!/) && !(/^!!ACC\$INSERT/i)) {
              $f90_continue = 0;
	      $thisline+=$contlines;
	      $contlines = 0;
	    } 
	    next;
	  }
#		next line is a f90 continuation line
	  if (((/&\s*$/) || (/&\s*!/)) && !(/^!/)) {
	    if ($f90_continue == 0) {
	      $thisline++;
	      $contlines=0;
	      $codelines{$thisline}="$_\n";	
	      $prevcode = $thisline;
	      $f90_continue = 1;
	    }
	    next;
	  }
          if ((/^\s*$/) && ($contlines > 0)) { # blank lines
	    $codelines{$prevcode}.="$_\n";              
	    $contlines++;
	    next;
	  }
	}
#
#	increment the new line counter
	$thisline+=$contlines+1;

# handling of fortran comments within continuation statements
	if ($FreeFormat) {
	  if(/[!]/i){
	    $prevcomment = $thisline;
	    my $line = "//".$_;
	    $_ = $line;
	  }
	} else {
	  if(/^[C!]/i){ 
	    $prevcomment = $thisline;
	    my $line = "//".$_;
	    $_ = $line;
	  }
	}
	$contlines=0;
	$codelines{$thisline}="$_\n";	
        $prevcode = $thisline unless($prevcomment==$thisline);
    }
#
#  merge replaced and appended lines into the source

    my $linenum;
    my $line;

    foreach $linenum (keys %remove){
	$codelines{$linenum} = "GPU-REMOVE-TAG\n";
    }

    foreach $linenum (keys %replace){
#        print "Replace $linenum >$replace{$linenum}<>$codelines{$linenum}<\n";
	unless(defined($codelines{$linenum})){
	    print "Possible error in replace $linenum $replace{$linenum}\n" if($debug);
	}
	if ( ($comment==1) && ($replace{$linenum} =~/FTNREF/) ) {
	  $codelines{$linenum} = "// ".join("\n// ",split("\n",$codelines{$linenum}))."\n";
	  $codelines{$linenum} .= "$replace{$linenum}";
	} else {
	  $codelines{$linenum} = "$replace{$linenum}";
	}
    }

    foreach $linenum (keys %append){
#         print "Append $linenum >$append{$linenum}<>$codelines{$linenum}<\n" if($debug>0);
	unless(defined($codelines{$linenum})){
#	    print "Possible error in append $linenum $append{$linenum}\n" if($debug);
	}
	# prepend GPU comment to code that causes an error
	$codelines{$linenum} .= "$append{$linenum}";
    }

# produce an output file:
# code generation for CPU and GPU code remains the order in which the
# statements in the original code occured.  To conform to C, CUDA grammar
# rules, the preprocessor defines should be first, followed
# by any GPU device variables, accelerator routines, and finally the CPU
# driver routine.  During the merge process, each statement is classified
# into these categories and output in the order required as defined
# by the loop variable "$output".
#
# output value:
#  0 - gather all the "#define" statements and "#include"
#  1 - gather all "__device__" variables defined in the accelerator kernels
#  2 - gather all accelerator kernels (characterized by ACC$REGION BEGIN / END
#  3 - gather remaining statements - which should be the CPU driver and kernel

	my $accregion = 3;
	my $line_type=0;
    open(OUTFILE,">$MERGE_OUT");

    for (my $output=0; $output<=3; $output++) {

      foreach $linenum (sort numerically keys %codelines) {
	my @lines= split(/\n/,$codelines{$linenum});
	my $line;
        my $numlines = scalar(split("\n",$codelines{$linenum}));
#
# check for a blank line
	if (($numlines == 0) && ($output >=2)) {
	    print OUTFILE "\n";
	}

	foreach $line (@lines){
          if ($Generate eq "CUDA") {
            if(($line =~/^\/\/cacc\$region.+begin\s*$/i) ||
                ($line =~/^\/\/!acc\$region.+begin\s*$/i)) {
	      $accregion = 2;
	    }
  	  }

	  if (($line =~/^#define/i) || ($line =~/^#include/i)) {
	    $line_type = 0;
	  } elsif (($line =~/^extern __device__/i) || ($line =~/^__device__/i) || ($line =~/^extern void/i)) {
	    $line_type = 1;
	  } else {
	    $line_type = $accregion;
	  }
	    
	  if ($line_type == $output) {
	    if ($line =~/^GPU-REMOVE-TAG/) {
	      next;
	    } else {
	      print OUTFILE "$line\n";
	    }
	  }
          if ($Generate eq "CUDA") {
            if( ($line =~/^\/\/cacc\$region.+end\s*$/i) ||
                ($line =~/^\/\/!acc\$region.+end\s*$/i) ) {
	      $accregion = 3;
	    }
	  }
        }
    }
    }
    close(OUTFILE);
    return;
}

# ***************************************************************************
#
# Parse output into edit instructions 
#
# MWG:	Currently 3 actions are supported
#	replace				- single line replace text
#	begin_append / end_append	- multi line replace
#	remove				- single line remove 
#
sub next_action{
    my($smsout_ref) = @_;
    my($action,$line_num,$string);
    my($line) = '';
    $line = shift(@$smsout_ref);
    $line = shift(@$smsout_ref) until(($line =~ /begin_append\s\d+/) 
	      || ($line =~ /replace\s\d+\s+.*/)
	      || ($line =~ /remove\s\d+\s+.*/)
	      || ! $line);
    $string='';

    if($line =~ /begin_append\s(\d+)/){
	$action = "append";
	$line_num = $1;
	while(!(($line = shift(@$smsout_ref)) =~ /end_append/)){
	  my $ACCDirective = 0;
	  if ($line =~ /^!ACC\$/i) {
	    $ACCDirective = 1;
	  }
	  if($line =~ /^\s*(\d+)(\s+.*)/){
	    $line = $2;
	    my $label = $1;
	    $string .= "$line\n";
	  } else {
	    $string .= "$line\n";
	  }
	}
	
	return( $action,$line_num,$string);
    }

    if($line =~ /replace\s(\d+)(\s+.*)/){
        $line_num = $1;
	$line = $2;
	my $label='';
	$string = "$line\n";

	return("replace",$line_num,$string);
    }
 
    my $action;
    if($line =~ /remove\s(\d+)(\s+.*)/) {
      $line_num = $1;
      $line = $2;
      $string = "";
      my $label='';
      return("remove",$line_num,$string);

    }

    return(-1);
}

# ***************************************************************************
#  routine to run ppp executables and store the output in the file $GPUOUT
#
#  input file:  $ACCIN
#  output file:	$GPUOUT
#
sub run_translator{my($GPU_EXECS,$ACCIN,$name,$debug) = @_;
 
    my(@ACC) = @$GPU_EXECS;
    my $GPUOUT= "/tmp/$name/ACC.out.$$";
    if(-e "$GPUOUT"){
	unlink($GPUOUT) || die "$GPUOUT exists and cannot be overwritten";
    }
    my (@flags);
#    push @flags,"-r81" if($Real8);
#    push @flags,"-i81" if($Integer8);
    push @flags,"-fixed" if(($FixedFormat) || (!$FreeFormat));
    push @flags,"-module1" if($Module);
    push @flags,"-kernel1" if($Kernel);
    if ($Generate eq "C") {
      push @flags,"-generate0";
    } else {
      push @flags,"-generate1";
    }	 
    if ($Header) {
      push @flags,"-h1";
    }
    my $status = 0;
    my $tstatus = 0;
    foreach(@ACC) {
	print "Running $_ with @flags\n" if($debug);
	my $sys = "$_ @flags $ACCIN 1>& $GPUOUT"; 
	$status = system($sys);
	$tstatus = $tstatus + $status;
    }

    # Eli WARNING messages are saved in $GPUOUT so they can be
    # embedded in the generated code.  These messages, as well as
    # any error messages should also be output to the screen.  This
    # is handled below:

    open(GPUout,"$GPUOUT");
    my @smsout = <GPUout>;
    foreach(@smsout){
        chomp;
	if (/^"/) {
	  print "$_\n";
	}
    }
    close(GPUout);
    unlink($GPUOUT) unless($debug);

# exit if there were parsing errors
    if ($tstatus > 0) {
      print "\nF2C-ACC translation failed due to errors.  Correct these problems and try again.\n";
      exit;
    }
#
    return @smsout;
}
